/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module "gcve-mon-project-0" {
  source          = "../../../modules/project"
  billing_account = var.billing_account_id
  name            = "gcve-mon"
  parent          = var.folder_id
  prefix          = var.prefix
  iam    = var.iam
  labels = var.labels
  services = concat([
    "compute.googleapis.com",
    "monitoring.googleapis.com",
    "logging.googleapis.com",
    "secretmanager.googleapis.com"
    ],
    var.project_services
  )
  shared_vpc_service_config = {
    host_project = var.network_project_id
  }
}

module "gcve-monitoring" {
  source             = "../../../modules/gcve-monitoring"
  project_id         = module.gcve-mon-project-0.name
  network_project_id = var.network_project_id
  network_self_link  = var.network_self_link
}

/*
locals {
  base_gcve_agent_endpoint   = "https://storage.googleapis.com/gcve-observability-agent/latest/vmware-linux-amd64"
  base_gcloud_secret_manager = "gcloud secrets versions access latest --secret="
  sa_gcve_monitoring_roles = toset([
    "roles/secretmanager.secretAccessor",
    "roles/monitoring.admin",
    "roles/logging.logWriter",
  ])
}

data "google_compute_subnetwork" "gcve-subnetwork" {
  name    = var.subnetwork
  region  = var.gcve_region
  project = var.network_project_id
}

resource "google_service_account" "sa_gcve_monitoring" {
  project    = module.gcve-mon-project-0.name
  account_id = var.sa_gcve_monitoring
}

resource "google_project_iam_member" "gcve_monitoring_permissions" {
  for_each = local.sa_gcve_monitoring_roles
  role     = each.key
  project  = module.gcve-mon-project-0.name
  member   = "serviceAccount:${google_service_account.sa_gcve_monitoring.email}"
}



resource "google_compute_firewall" "healthcheck" {
  project = var.network_project_id
  name    = "gcve-mon-hc-rule"
  network = data.google_compute_subnetwork.gcve-subnetwork.network

  allow {
    protocol = "tcp"
    ports    = ["5142"]
  }

  source_ranges           = ["35.191.0.0/16", "130.211.0.0/22"]
  target_service_accounts = [google_service_account.sa_gcve_monitoring.email]
}

resource "google_monitoring_dashboard" "gcve_mon_dashboards" {
  for_each       = var.create_dashboards ? fileset("${path.module}/dashboards", "*.json") : []
  dashboard_json = file("${path.module}/dashboards/${each.value}")
  project        = module.gcve-mon-project-0.name
}




//
module "gcve-mon-template" {
  source          = "../../../modules/compute-vm"
  project_id      = module.gcve-mon-project-0.name
  name            = "gcve-mon-template"
  zone            = var.vm_mon_zone
  instance_type   = var.vm_mon_type
  create_template = true
  can_ip_forward  = false
  network_interfaces = [
    {
      network = "https://www.googleapis.com/compute/v1/projects/kschi-prod-net-spoke-0/global/networks/prod-spoke-0"
      subnetwork = data.google_compute_subnetwork.gcve-subnetwork.self_link
      nat       = false
      addresses = null
    }
  ]
  boot_disk = {
    initialize_params = {
      image = "projects/debian-cloud/global/images/family/debian-11"
      size = 100
      type = "pd-balanced"
    }
  }
  options = {
    allow_stopping_for_update = true
    deletion_protection       = false
    spot                      = false
    termination_action        = "STOP"
  }

  metadata = {
    startup-script = templatefile("${path.module}/scripts/installer.sh",
    {
        endpoint_agent                 = "${local.base_gcve_agent_endpoint}/artifacts/bpagent-headless-vmware.tar.gz"
        endpoint_install               = "${local.base_gcve_agent_endpoint}/installer/install.sh"
        gcloud_secret_vsphere_server   = "${local.base_gcloud_secret_manager}${var.secret_vsphere_server}"
        gcloud_secret_vsphere_user     = "${local.base_gcloud_secret_manager}${var.secret_vsphere_user}"
        gcloud_secret_vsphere_password = "${local.base_gcloud_secret_manager}${var.secret_vsphere_password}"
        gcve_region                    = var.gcve_region
        project_id                     = module.gcve-mon-project-0.name
    })
  }

  service_account = {
    email  = google_service_account.sa_gcve_monitoring.email
    scopes = ["https://www.googleapis.com/auth/cloud-platform"]
  }
}

module "gcve-mon-mig" {
  source            = "../../../modules/compute-mig"
  project_id        = module.gcve-mon-project-0.name
  location          = var.gcve_region
  name              = "${var.vm_mon_name}-mig"
  instance_template = module.gcve-mon-template.template.self_link
  target_size       = 1
  auto_healing_policies = {
    initial_delay_sec = 30
  }
  health_check_config = {
    enable_logging = true
    tcp = {
      port = 5142
    }
  }
}

module "secret-manager" {
  source     = "../../../modules/secret-manager"
  project_id = module.gcve-mon-project-0.name
  secrets = {
    (var.secret_vsphere_server) = {locations = [var.gcve_region]},
    (var.secret_vsphere_user) = {locations = [var.gcve_region]},
    (var.secret_vsphere_password) = {locations = [var.gcve_region]}
  }
}

*/
